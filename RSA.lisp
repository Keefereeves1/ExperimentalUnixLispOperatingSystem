(in-package #:your-package)
(defconstant *modulus* "your-modulus-value-here")
(defun encrypt (message)
 (let* ((encrypted-message (mod (expt (length message) (expt 2 16)) 
*modulus*)))
    (make-string (length encrypted-message) :initial-content 
(narrow-to-char #\0 encrypted-message))))
(defun decrypt (encrypted-message)
 (let* ((message-length (expt (length encrypted-message) (expt 2 8)))
         (message-value (mod (expt (expt 2 16) message-length) 
*modulus*)))
    (subseq message-value 0 (1- (expt (length '0) 16))))))
(defun generate-keys ()
 (let ((p (read-from-string (read-line *standard-output*)))
        (q (read-from-string (read-line *standard-output*)))
        (n (expt (expt 2 16) (expt 2 16) (expt 2 16)))))
    (values p q n)))
